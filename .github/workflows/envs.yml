# This is a basic workflow to help you get started with Actions

name: "Environment Vars"

# Controls when the workflow will run
on: [ "push", "workflow_dispatch" ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  envs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo "'$GITHUB_WORKFLOW' GITHUB_WORKFLOW  The name of the workflow."
          echo "'$GITHUB_RUN_ID' GITHUB_RUN_ID  A unique number for each run within a repository. This number does not change if you re-run the workflow run."
          echo "'$GITHUB_RUN_NUMBER' GITHUB_RUN_NUMBER  A unique number for each run of a particular workflow in a repository. This number begins at 1 for the workflow's first run, and increments with each new run. This number does not change if you re-run the workflow run."
          echo "'$GITHUB_JOB' GITHUB_JOB  The job_id of the current job."
          echo "'$GITHUB_ACTION' GITHUB_ACTION  The unique identifier (id) of the action."
          echo "'$GITHUB_ACTION_PATH' GITHUB_ACTION_PATH  The path where your action is located. You can use this path to access files located in the same repository as your action. This variable is only supported in composite actions."
          echo "'$GITHUB_ACTIONS' GITHUB_ACTIONS  Always set to true when GitHub Actions is running the workflow. You can use this variable to differentiate when tests are being run locally or by GitHub Actions."
          echo "'$GITHUB_ACTOR' GITHUB_ACTOR  The name of the person or app that initiated the workflow. For example, octocat."
          echo "'$GITHUB_REPOSITORY' GITHUB_REPOSITORY  The owner and repository name. For example, octocat/Hello-World."
          echo "'$GITHUB_EVENT_NAME' GITHUB_EVENT_NAME  The name of the webhook event that triggered the workflow."
          echo "'$GITHUB_EVENT_PATH' GITHUB_EVENT_PATH  The path of the file with the complete webhook event payload. For example, /github/workflow/event.json."
          echo "'$GITHUB_WORKSPACE' GITHUB_WORKSPACE  The GitHub workspace directory path, initially empty. For example, /home/runner/work/my-repo-name/my-repo-name. The actions/checkout action will check out files, by default a copy of your repository, within this directory."
          echo "'$GITHUB_SHA' GITHUB_SHA  The commit SHA that triggered the workflow. For example, ffac537e6cbbf934b08745a378932722df287a53."
          echo "'$GITHUB_REF' GITHUB_REF  The branch or tag ref that triggered the workflow. For example, refs/heads/feature-branch-1. If neither a branch or tag is available for the event type, the variable will not exist."
          echo "'$GITHUB_REF_NAME' GITHUB_REF_NAME  The branch or tag name that triggered the workflow run."
          echo "'$GITHUB_REF_PROTECTED' GITHUB_REF_PROTECTED  true if branch protections are configured for the ref that triggered the workflow run."
          echo "'$GITHUB_REF_TYPE' GITHUB_REF_TYPE  The type of ref that triggered the workflow run. Valid values are branch or tag."
          echo "'$GITHUB_HEAD_REF' GITHUB_HEAD_REF  Only set for pull request events. The name of the head branch."
          echo "'$GITHUB_BASE_REF' GITHUB_BASE_REF  Only set for pull request events. The name of the base branch."
          echo "'$GITHUB_SERVER_URL' GITHUB_SERVER_URL  Returns the URL of the GitHub server. For example: https://github.com."
          echo "'$GITHUB_API_URL' GITHUB_API_URL  Returns the API URL. For example: https://api.github.com."
          echo "'$GITHUB_GRAPHQL_URL' GITHUB_GRAPHQL_URL  Returns the GraphQL API URL. For example: https://api.github.com/graphql."
          echo "'$RUNNER_NAME' RUNNER_NAME  The name of the runner executing the job."
          echo "'$RUNNER_OS' RUNNER_OS  The operating system of the runner executing the job. Possible values are Linux, Windows, or macOS."
          echo "'$RUNNER_ARCH' RUNNER_ARCH  The architecture of the runner executing the job. Possible values are X86, X64, ARM, and ARM64."
          echo "'$RUNNER_TEMP' RUNNER_TEMP  The path to a temporary directory on the runner. This directory is emptied at the beginning and end of each job. Note that files will not be removed if the runner's user account does not have permission to delete them."
          echo "'$RUNNER_TOOL_CACHE' RUNNER_TOOL_CACHE  The path to the directory containing preinstalled tools for GitHub-hosted runners. For more information, see Specifications for GitHub-hosted runners."
